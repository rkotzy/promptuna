#!/usr/bin/env node

import { readFile, writeFile, mkdir } from 'fs/promises';
import { dirname } from 'path';
import { fileURLToPath } from 'url';
import { resolve } from 'path';
// Import the correct AJV for draft 2020-12
import Ajv2020 from 'ajv/dist/2020.js';
import addFormats from 'ajv-formats';
import standaloneCode from 'ajv/dist/standalone/index.js';

const __dirname = dirname(fileURLToPath(import.meta.url));
const schemaPath = resolve(__dirname, '..', 'schema.json');
const outputPath = resolve(
  __dirname,
  '..',
  'dist',
  'validation',
  'compiled-validator.js'
);
const outputDtsPath = resolve(
  __dirname,
  '..',
  'dist',
  'validation',
  'compiled-validator.d.ts'
);

async function compileValidator() {
  try {
    // Read the schema
    const schemaContent = await readFile(schemaPath, 'utf-8');
    const schema = JSON.parse(schemaContent);

    // Create AJV instance for draft 2020-12
    const ajv = new Ajv2020({
      code: { source: true, esm: true },
      allErrors: true,
      verbose: false,
      strict: false,
      addUsedSchema: false,
    });

    // Add formats support
    addFormats(ajv);

    // Compile the schema
    const validate = ajv.compile(schema);

    // Generate standalone code
    const moduleCode = standaloneCode(ajv, validate);

    // Create the output directory if it doesn't exist
    await mkdir(dirname(outputPath), { recursive: true });

    // Write the compiled validator
    const output = `// Generated by compile-validators.js
// This file is auto-generated - do not edit manually

${moduleCode}
`;

    await writeFile(outputPath, output);

    // Write TypeScript declarations
    const dtsContent = `// Generated type declarations for compiled validator
// This file is auto-generated - do not edit manually

interface ValidatorError {
  instancePath: string;
  schemaPath: string;
  keyword: string;
  params?: Record<string, any>;
  message: string;
  schema?: any;
  parentSchema?: any;
  data?: any;
}

interface ValidatorFunction {
  (data: any, options?: any): boolean;
  errors?: ValidatorError[] | null;
}

declare const validateConfig: ValidatorFunction;
export default validateConfig;
`;

    await writeFile(outputDtsPath, dtsContent);

    console.log('‚úÖ Validator compiled successfully');
    console.log(`üìÅ Output: ${outputPath}`);
    console.log(`üìÅ Types: ${outputDtsPath}`);
  } catch (error) {
    console.error('‚ùå Failed to compile validator:', error.message);
    process.exit(1);
  }
}

compileValidator();
